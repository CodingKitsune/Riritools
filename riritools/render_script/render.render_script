local rt_msgs = require("riritools.lua.riritools_msgs")
local d_msgs = require("riritools.lua.defold_msgs")
local window_helper = require("riritools.lua.window_helper")

local default_view = vmath.matrix4()
local empty_projection = default_view

local set_view_projection = d_msgs.SET_VIEW_PROJECTION
local clear_color = d_msgs.CLEAR_COLOR
local window_resized = d_msgs.WINDOW_RESIZED
local disable_stencil_mask = rt_msgs.DISABLE_STENCIL_MASK
local enable_stencil_mask = rt_msgs.ENABLE_STENCIL_MASK
local set_zoom = rt_msgs.SET_ZOOM
local set_mirror = rt_msgs.SET_MIRROR

local clear_table = {
	[render.BUFFER_COLOR_BIT] = vmath.vector4(0), [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0
}
local clear_stencil_table = {[render.BUFFER_STENCIL_BIT] = 1}

local needs_first_update = true

local min = math.min
local draw = render.draw
local disable_state = render.disable_state
local enable_state = render.enable_state
local set_view = render.set_view
local set_projection = render.set_projection
local set_viewport = render.set_viewport
local clear = render.clear
local set_stencil_mask = render.set_stencil_mask
local set_depth_mask = render.set_depth_mask

function init(self)
	self.tile_pred = render.predicate({"tile"})
	self.gui_pred = render.predicate({"gui"})
	self.non_adjust_gui_pred = render.predicate({"non_adjust_gui"})
	self.text_pred = render.predicate({"text"})
	self.particle_pred = render.predicate({"particle"})
	self.background_pred = render.predicate({"background"})
	self.mask_pred = render.predicate({"screenfade"})
	self.transition_pred = render.predicate({"transition"})

	self.__stencil_mask_enabled = true
	self.__mirror_x = false
	self.__mirror_y = false
	self.__enable_3d = false

	self.__zoom_x = 1
	self.__zoom_y = 1

	self.__view = vmath.matrix4()
	self.__projection = nil

	local c_color = clear_table[render.BUFFER_COLOR_BIT]
	c_color.x = sys.get_config("render.clear_color_red", 0)
	c_color.y = sys.get_config("render.clear_color_green", 0)
	c_color.z = sys.get_config("render.clear_color_blue", 0)
	c_color.w = sys.get_config("render.clear_color_alpha", 0)

	msg.post(".", window_resized, {width=render.get_window_width(), height=render.get_window_height()})
end

function update(self)

	clear(clear_table)
	set_stencil_mask(0xff)
	set_depth_mask(false)

	disable_state(render.STATE_DEPTH_TEST)
	disable_state(render.STATE_STENCIL_TEST)
	disable_state(render.STATE_CULL_FACE)
	enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)

	local original_width = render.get_width()
	local original_height = render.get_height()
	local current_width = render.get_window_width()
	local current_height = render.get_window_height()
	local default_projection = vmath.matrix4_orthographic(0, current_width, 0, current_height, -1, 1)

	set_view(default_view)
	set_projection(default_projection)
	set_viewport(0, 0, current_width, current_height)

	draw(self.background_pred)

	set_view(self.__view)

	local zoom_factor = min(min(current_width / original_width, current_height / original_height), 1)
	local projected_width = current_width / zoom_factor
	local projected_height = current_height / zoom_factor
	local xoffset = -(projected_width - original_width) * 0.5
	local yoffset = -(projected_height - original_height) * 0.5

	if (self.__enable_3d and self.__projection) then
		set_projection(self.__projection)
	else
		local zoom_x = self.__zoom_x * (self.__mirror_x and -1 or 1)
		local zoom_y = self.__zoom_y * (self.__mirror_y and -1 or 1)
		set_projection(
			vmath.matrix4_orthographic(xoffset / zoom_x,
			(xoffset + projected_width) / zoom_x,
			yoffset / zoom_y,
			(yoffset + projected_height) / zoom_y, -1, 1)
		)
	end

	draw(self.tile_pred)
	draw(self.particle_pred)
	render.draw_debug3d()

	set_view(default_view)
	set_projection(default_projection)
	enable_state(render.STATE_STENCIL_TEST)

	draw(self.gui_pred)
	draw(self.text_pred)
    draw(self.non_adjust_gui_pred)

	if self.__stencil_mask_enabled then
	    set_projection(empty_projection)
	    render.set_color_mask(false, false, false, false)
	    render.set_stencil_func(render.COMPARE_FUNC_ALWAYS, 0, 0xff)
	    render.set_stencil_op(render.STENCIL_OP_KEEP, render.STENCIL_OP_KEEP, render.STENCIL_OP_REPLACE)
	    set_stencil_mask(0xff)
		clear(clear_stencil_table)

	    draw(self.mask_pred)

	    render.set_stencil_func(render.COMPARE_FUNC_EQUAL, 1, 0xff)
	    render.set_color_mask(true, true, true, true)
		draw(self.transition_pred)
	end

	set_depth_mask(false)
	disable_state(render.STATE_STENCIL_TEST)

	render.draw_debug2d()

	if (needs_first_update) then
		window_helper.update_window(self)
	end
end

function on_message(self, message_id, message)
	if (message_id == set_view_projection) then
		self.__view = message.view
		self.__projection = message.projection
	elseif message_id == set_zoom then
		if (message.zoom and message.zoom > 0) then
			self.__zoom_x = message.zoom
			self.__zoom_y = message.zoom
		else
			self.__zoom_x = (message.x > 0) and message.x or self.__zoom_x
			self.__zoom_y = (message.y > 0) and message.y or self.__zoom_y
		end
	elseif message_id == set_mirror then
		self.__mirror_x = message.x
		self.__mirror_y = message.y
	elseif message_id == clear_color then
		clear_table[render.BUFFER_COLOR_BIT] = message.color
	elseif message_id == window_resized then
		window_helper.update_window(self)
	elseif message_id == disable_stencil_mask then
		self.__stencil_mask_enabled = false
	elseif message_id == enable_stencil_mask then
		self.__stencil_mask_enabled = true
	end
end
