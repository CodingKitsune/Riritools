local input_helper = require("riritools.lua.input_helper")
local defold_msg = require("riritools.lua.defold_msgs")
local rt_msgs = require("riritools.lua.riritools_msgs")
local rt_inputs = require("riritools.lua.riritools_inputs")
local chronometer = require("riritools.lua.chronometer")
local vector_utils = require("riritools.lua.vector_utils")
local window_helper = require("riritools.lua.window_helper")

go.property("offset", vmath.vector3())
go.property("anchor", vmath.vector3())
go.property("delay", 0)
go.property("speed", 2)
go.property("locked", 1)
go.property("zoom", 1)
go.property("enable_input", 0)

local set_zoom = rt_msgs.SET_ZOOM
local post = msg.post
local get_position = go.get_position
local set_position = go.set_position
local animate = go.animate

local render

function init(self)
	render = render or msg.url("@render:")

	self.target = nil
    self.target_position = vector_utils.NULL_VECTOR3
    self.target_zoom = self.zoom
    self.locked = self.locked == 0
    self.timer = chronometer:new()
    self.timer:restart()

    post(".", defold_msg.ACQUIRE_CAMERA_FOCUS)
	post(render, set_zoom, {zoom = self.zoom})

    if (self.enable_input == 1) then
		msg.post(".", defold_msg.ACQUIRE_INPUT_FOCUS)
		input_helper.init(self)

		input_helper.add(self, rt_inputs.CAMERA_TOGGLE_TARGET, function(self, action)
			if (action.pressed) then
				self.locked = not self.locked
				if (self.locked and self.target) then
					self.target_position = go.get_position(self.target) + self.offset
					go.set_position(self.target_position)
				end
			end
		end)

		input_helper.add(self, rt_inputs.CAMERA_X_DOWN, function(self)
			if (not self.locked) then
				local position = go.get_position()
				position.x = position.x - self.speed
				go.set_position(position)
			end
		end)

		input_helper.add(self, rt_inputs.CAMERA_X_UP, function(self)
			if (not self.locked) then
				local position = go.get_position()
				position.x = position.x + self.speed
				go.set_position(position)
			end
		end)

		input_helper.add(self, rt_inputs.CAMERA_Y_DOWN, function(self)
			if (not self.locked) then
				local position = go.get_position()
				position.y = position.y - self.speed
				go.set_position(position)
			end
		end)

		input_helper.add(self, rt_inputs.CAMERA_Y_UP, function(self)
			if (not self.locked) then
				local position = go.get_position()
				position.y = position.y + self.speed
				go.set_position(position)
			end
		end)

		input_helper.add(self, rt_inputs.CAMERA_Z_DOWN, function(self)
			if (not self.locked) then
				if (window_helper.is_3d_enabled) then
					local position = go.get_position()
					position.z = position.z - self.speed
					go.set_position(position)
				else
					self.zoom = self.zoom - self.speed * 0.01
					msg.post(render, set_zoom, {zoom = self.zoom})
				end
			end
		end)

		input_helper.add(self, rt_inputs.CAMERA_Z_UP, function(self)
			if (not self.locked) then
				if (window_helper.is_3d_enabled) then
					local position = go.get_position()
					position.z = position.z + self.speed
					go.set_position(position)
				else
					self.zoom = self.zoom + self.speed * 0.01
					msg.post(render, set_zoom, {zoom = self.zoom})
				end
			end
		end)

		input_helper.add(self, rt_inputs.CAMERA_RX_DOWN, function(self)
			if (not self.locked) then
				local rotation = go.get_rotation()
				rotation.x = rotation.x - self.speed * 0.01
				go.set_rotation(rotation)
			end
		end)

		input_helper.add(self, rt_inputs.CAMERA_RX_UP, function(self)
			if (not self.locked) then
				local rotation = go.get_rotation()
				rotation.x = rotation.x + self.speed * 0.01
				go.set_rotation(rotation)
			end
		end)

		input_helper.add(self, rt_inputs.CAMERA_RY_DOWN, function(self)
			if (not self.locked) then
				local rotation = go.get_rotation()
				rotation.y = rotation.y - self.speed * 0.01
				go.set_rotation(rotation)
			end
		end)

		input_helper.add(self, rt_inputs.CAMERA_RY_UP, function(self)
			if (not self.locked) then
				local rotation = go.get_rotation()
				rotation.y = rotation.y + self.speed * 0.01
				go.set_rotation(rotation)
			end
		end)

		input_helper.add(self, rt_inputs.CAMERA_RZ_DOWN, function(self)
			if (not self.locked) then
				local rotation = go.get_rotation()
				rotation.z = rotation.z - self.speed * 0.01
				go.set_rotation(rotation)
			end
		end)

		input_helper.add(self, rt_inputs.CAMERA_RZ_UP, function(self)
			if (not self.locked) then
				local rotation = go.get_rotation()
				rotation.z = rotation.z + self.speed * 0.01
				go.set_rotation(rotation)
			end
		end)
	end
end

function final(self)
	post(".", defold_msg.RELEASE_CAMERA_FOCUS)
end

function update(self, dt)
	self.timer:update(dt)

	if (self.target and self.locked) then
		local anchor = vmath.vector3(
			self.anchor.x * window_helper.width * window_helper.scale_x / self.zoom,
			self.anchor.y * window_helper.height * window_helper.scale_y / self.zoom,
			0
		)
		post(render, set_zoom, {zoom=self.zoom})
		if (self.delay == 0) then
			self.zoom = self.target_zoom
			set_position(get_position(self.target) + self.offset + anchor)
		else
			if (self.timer:as_seconds() > self.delay) then
				self.target_position = get_position(self.target) + self.offset + anchor
				self.timer:restart()
				animate("#", "zoom", go.PLAYBACK_ONCE_FORWARD, self.target_zoom, go.EASING_LINEAR, self.speed)
				animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, self.target_position.x, go.EASING_LINEAR, self.speed)
				animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, self.target_position.y, go.EASING_LINEAR, self.speed)
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if (message_id == rt_msgs.SET_CAMERA_TARGET) then
		self.target = message.target and msg.url(message.target) or sender
		self.locked = true
	elseif (message_id == rt_msgs.SET_CAMERA_POSITION) then
		self.target = msg.url(message.target)
	elseif (message_id == rt_msgs.SET_CAMERA_OFFSET) then
		self.offset = message.offset
	elseif (message_id == rt_msgs.SET_CAMERA_ANCHOR) then
		self.anchor = message.anchor
	elseif (message_id == rt_msgs.SET_CAMERA_DELAY) then
		self.delay = message.delay
	elseif (message_id == rt_msgs.SET_CAMERA_ZOOM) then
		self.target_zoom = message.zoom
	end
end

function on_input(self, action_id, action)
	if (self.enable_input == 1) then
		input_helper.on_input(self, action_id, action)
	end
end
